// -*- C++ -*-
#ifndef QUADRATURE_H
#define QUADRATURE_H

#include "Definitions.h"

namespace Quadrature {
//------------------------------------------------------------------------------
// Interpolation::Gaussian
//------------------------------------------------------------------------------

template <unsigned Dimension, unsigned NumberOfPoints>
QuadratureRule<Dimension, NumberOfPoints>
buildGaussianQuadrature() {
  errorStatement("unimplemented gaussian quadrature for problem Dimension %u "
        "and number of points %u\n", Dimension, NumberOfPoints);
  exit(1);
}

template <>
QuadratureRule<1, 1>
buildGaussianQuadrature<1, 1>() {
  array<Matrix<double, 1, 1>, 1> points;
  points[0](0) = (0.);
  array<double, 1> weights = {{2.0e0}};
  return QuadratureRule<1, 1>(points, weights);
}

template <>
QuadratureRule<2, 1>
buildGaussianQuadrature<2, 1>() {
  array<Matrix<double, 2, 1>, 1> points;
  points[0] = Matrix<double, 2, 1>(0.,0.);
  array<double, 1> weights = {{4.0e0}};
  return QuadratureRule<2, 1>(points, weights);
}

template <>
QuadratureRule<2, 4>
buildGaussianQuadrature<2, 4>() {
  array<Matrix<double, 2, 1>, 4> points;
  points[0] = Matrix<double, 2, 1>(-0.577350269189626e0, -0.577350269189626e0);
  points[1] = Matrix<double, 2, 1>(-0.577350269189626e0, 0.577350269189626e0);
  points[2] = Matrix<double, 2, 1>(0.577350269189626e0, -0.577350269189626e0);
  points[3] = Matrix<double, 2, 1>(0.577350269189626e0, 0.577350269189626e0);

  array<double, 4> weights = {{1.,1.,1.,1.}};
  return QuadratureRule<2, 4>(points, weights);
}

template <>
QuadratureRule<2, 9>
buildGaussianQuadrature<2, 9>() {
  array<Matrix<double, 2, 1>, 9> points;
  points[0] = Matrix<double, 2, 1>(-0.774596669241483e0, -0.774596669241483e0);
  points[1] = Matrix<double, 2, 1>(-0.774596669241483e0, 0.0);
  points[2] = Matrix<double, 2, 1>(-0.774596669241483e0, 0.774596669241483e0);
  points[3] = Matrix<double, 2, 1>(0.0, -0.774596669241483e0);
  points[4] = Matrix<double, 2, 1>(0.0, 0.0);
  points[5] = Matrix<double, 2, 1>(0.0, 0.774596669241483e0);
  points[6] = Matrix<double, 2, 1>(0.774596669241483e0, -0.774596669241483e0);
  points[7] = Matrix<double, 2, 1>(0.774596669241483e0, 0.0);
  points[8] = Matrix<double, 2, 1>(0.774596669241483e0, 0.774596669241483e0);

  array<double, 9> weights = {{4./9.,4./9.,4./9.,4./9.,4./9.,4./9.,4./9.,4./9.,4./9.}};
  return QuadratureRule<2, 9>(points, weights);
}

// G is not sure it's right
template <>
QuadratureRule<3, 8>
buildGaussianQuadrature<3, 8>() {
  array<Matrix<double, 3, 1>, 8> points;
  points[0] = Matrix<double, 3, 1>(-0.577350269189626e0, -0.577350269189626e0,
                                   -0.577350269189626e0);
  points[1] = Matrix<double, 3, 1>(-0.577350269189626e0, -0.577350269189626e0,
                                   0.577350269189626e0);
  points[2] = Matrix<double, 3, 1>(-0.577350269189626e0, 0.577350269189626e0,
                                   -0.577350269189626e0);
  points[3] = Matrix<double, 3, 1>(-0.577350269189626e0, 0.577350269189626e0,
                                   0.577350269189626e0);
  points[4] = Matrix<double, 3, 1>(0.577350269189626e0, -0.577350269189626e0,
                                   -0.577350269189626e0);
  points[5] = Matrix<double, 3, 1>(0.577350269189626e0, -0.577350269189626e0,
                                   0.577350269189626e0);
  points[6] = Matrix<double, 3, 1>(0.577350269189626e0, 0.577350269189626e0,
                                   -0.577350269189626e0);
  points[7] = Matrix<double, 3, 1>(0.577350269189626e0, 0.577350269189626e0,
                                   0.577350269189626e0);
  array<double, 8> weights = {{1.,1.,1.,1.,1.,1.,1.,1.}};
  return QuadratureRule<3, 8>(points, weights);
}

template <>
QuadratureRule<1, 3>
buildGaussianQuadrature<1, 3>() {
  array<Matrix<double, 1, 1>, 3> points;
  points[0](0) = (-0.774596669241483e0);
  points[1](0) = (0.);
  points[2](0) = (0.774596669241483e0);
  array<double, 3> weights = {{0.555555555555556e0,
                               0.888888888888889e0,
                               0.555555555555556e0}};
  return QuadratureRule<1, 3>(points, weights);
}

template <>
QuadratureRule<1, 4>
buildGaussianQuadrature<1, 4>() {
  array<Matrix<double, 1, 1>, 4> points;
  points[0](0) = (-0.861136311594053e0);
  points[1](0) = (-0.339981043584856e0);
  points[2](0) = (0.339981043584856e0);
  points[3](0) = (0.861136311594053e0);
  array<double, 4> weights = {{0.347854845137454e0,
                               0.652145154862546e0,
                               0.652145154862546e0,
                               0.347854845137454e0}};
  return QuadratureRule<1, 4>(points, weights);
}

template <>
QuadratureRule<1, 5>
buildGaussianQuadrature<1, 5>() {
  array<Matrix<double, 1, 1>, 5> points;
  points[0](0) = (-0.906179845938664e0);
  points[1](0) = (-0.538469310105683e0);
  points[2](0) = (0.);
  points[3](0) = (0.538469310105683e0);
  points[4](0) = (0.906179845938664e0);
  array<double, 5> weights = {{0.236926885056189e0,
                               0.478628670499366e0,
                               0.568888888888889e0,
                               0.478628670499366e0,
                               0.236926885056189e0}};
  return QuadratureRule<1, 5>(points, weights);
}

template <>
QuadratureRule<1, 6>
buildGaussianQuadrature<1, 6>() {
  array<Matrix<double, 1, 1>, 6> points;
  points[0](0) = (-0.932469514203152e0);
  points[1](0) = (-0.661209386466265e0);
  points[2](0) = (-0.238619186083197e0);
  points[3](0) = (0.238619186083197e0);
  points[4](0) = (0.661209386466265e0);
  points[5](0) = (0.932469514203152e0);
  array<double, 6> weights = {{0.171324492379170e0,
                               0.360761573048139e0,
                               0.467913934572691e0,
                               0.467913934572691e0,
                               0.360761573048139e0,
                               0.171324492379170e0}};
  return QuadratureRule<1, 6>(points, weights);
}

template <>
QuadratureRule<1, 7>
buildGaussianQuadrature<1, 7>() {
  array<Matrix<double, 1, 1>, 7> points;
  points[0](0) = (-0.949107912342759e0);
  points[1](0) = (-0.741531185599394e0);
  points[2](0) = (-0.405845151377397e0);
  points[3](0) = (0.);
  points[4](0) = (0.405845151377397e0);
  points[5](0) = (0.741531185599394e0);
  points[6](0) = (0.949107912342759e0);
  array<double, 7> weights = {{0.129484966168870e0,
                               0.279705391489277e0,
                               0.381830050505119e0,
                               0.417959183673469e0,
                               0.381830050505119e0,
                               0.279705391489277e0,
                               0.129484966168870e0}};
  return QuadratureRule<1, 7>(points, weights);
}

template <>
QuadratureRule<1, 8>
buildGaussianQuadrature<1, 8>() {
  array<Matrix<double, 1, 1>, 8> points;
  points[0](0) = (-0.960289856497536e0);
  points[1](0) = (-0.796666477413627e0);
  points[2](0) = (-0.525532409916329e0);
  points[3](0) = (-0.183434642495650e0);
  points[4](0) = (0.183434642495650e0);
  points[5](0) = (0.525532409916329e0);
  points[6](0) = (0.796666477413627e0);
  points[7](0) = (0.960289856497536e0);
  array<double, 8> weights = {{0.101228536290376e0,
                               0.222381034453374e0,
                               0.313706645877887e0,
                               0.362683783378362e0,
                               0.362683783378362e0,
                               0.313706645877887e0,
                               0.222381034453374e0,
                               0.101228536290376e0}};
  return QuadratureRule<1, 8>(points, weights);
}

template <>
QuadratureRule<1, 9>
buildGaussianQuadrature<1, 9>() {
  array<Matrix<double, 1, 1>, 9> points;
  points[0](0) = (-0.968160239507626e0);
  points[1](0) = (-0.836031107326636e0);
  points[2](0) = (-0.613371432700590e0);
  points[3](0) = (-0.324253423403809e0);
  points[4](0) = (0.);
  points[5](0) = (0.324253423403809e0);
  points[6](0) = (0.613371432700590e0);
  points[7](0) = (0.836031107326636e0);
  points[8](0) = (0.968160239507626e0);
  array<double, 9> weights = {{0.081274388361574e0,
                               0.180648160694857e0,
                               0.260610696402935e0,
                               0.312347077040003e0,
                               0.330239355001260e0,
                               0.312347077040003e0,
                               0.260610696402935e0,
                               0.180648160694857e0,
                               0.081274388361574e0}};
  return QuadratureRule<1, 9>(points, weights);
}

template <>
QuadratureRule<1, 10>
buildGaussianQuadrature<1, 10>() {
  array<Matrix<double, 1, 1>, 10> points;
  points[0](0) = (-0.973906528517172e0);
  points[1](0) = (-0.865063366688985e0);
  points[2](0) = (-0.679409568299024e0);
  points[3](0) = (-0.433395394129247e0);
  points[4](0) = (-0.148874338981631e0);
  points[5](0) = (0.148874338981631e0);
  points[6](0) = (0.433395394129247e0);
  points[7](0) = (0.679409568299024e0);
  points[8](0) = (0.865063366688985e0);
  points[9](0) = (0.973906528517172e0);
  array<double, 10> weights = {{0.066671344308688e0,
                                0.149451349150581e0,
                                0.219086362515982e0,
                                0.269266719309996e0,
                                0.295524224714753e0,
                                0.295524224714753e0,
                                0.269266719309996e0,
                                0.219086362515982e0,
                                0.149451349150581e0,
                                0.066671344308688e0}};
  return QuadratureRule<1, 10>(points, weights);
}

template <>
QuadratureRule<1, 11>
buildGaussianQuadrature<1, 11>() {
  array<Matrix<double, 1, 1>, 11> points;
  points[0](0) = (-0.978228658146057e0);
  points[1](0) = (-0.887062599768095e0);
  points[2](0) = (-0.730152005574049e0);
  points[3](0) = (-0.519096129206812e0);
  points[4](0) = (-0.269543155952345e0);
  points[5](0) = (0.);
  points[6](0) = (0.269543155952345e0);
  points[7](0) = (0.519096129206812e0);
  points[8](0) = (0.730152005574049e0);
  points[9](0) = (0.887062599768095e0);
  points[10](0) = (0.978228658146057e0);
  array<double, 11> weights = {{0.055668567116174e0,
                                0.125580369464905e0,
                                0.186290210927734e0,
                                0.233193764591990e0,
                                0.262804544510247e0,
                                0.272925086777901e0,
                                0.262804544510247e0,
                                0.233193764591990e0,
                                0.186290210927734e0,
                                0.125580369464905e0,
                                0.055668567116174e0}};
  return QuadratureRule<1, 11>(points, weights);
}

template <>
QuadratureRule<1, 12>
buildGaussianQuadrature<1, 12>() {
  array<Matrix<double, 1, 1>, 12> points;
  points[0](0) = (-0.981560634246719e0);
  points[1](0) = (-0.904117256370475e0);
  points[2](0) = (-0.769902674194305e0);
  points[3](0) = (-0.587317954286617e0);
  points[4](0) = (-0.367831498918180e0);
  points[5](0) = (-0.125233408511469e0);
  points[6](0) = (0.125233408511469e0);
  points[7](0) = (0.367831498918180e0);
  points[8](0) = (0.587317954286617e0);
  points[9](0) = (0.769902674194305e0);
  points[10](0) = (0.904117256370475e0);
  points[11](0) = (0.981560634246719e0);
  array<double, 12> weights = {{0.047175336386512e0,
                                0.106939325995318e0,
                                0.160078328543346e0,
                                0.203167426723066e0,
                                0.233492536538355e0,
                                0.249147045813403e0,
                                0.249147045813403e0,
                                0.233492536538355e0,
                                0.203167426723066e0,
                                0.160078328543346e0,
                                0.106939325995318e0,
                                0.047175336386512e0}};
  return QuadratureRule<1, 12>(points, weights);
}

template <>
QuadratureRule<1, 13>
buildGaussianQuadrature<1, 13>() {
  array<Matrix<double, 1, 1>, 13> points;
  points[0](0) = (-0.984183054718588e0);
  points[1](0) = (-0.917598399222978e0);
  points[2](0) = (-0.801578090733310e0);
  points[3](0) = (-0.642349339440340e0);
  points[4](0) = (-0.448492751036447e0);
  points[5](0) = (-0.230458315955135e0);
  points[6](0) = (0.);
  points[7](0) = (0.230458315955135e0);
  points[8](0) = (0.448492751036447e0);
  points[9](0) = (0.642349339440340e0);
  points[10](0) = (0.801578090733310e0);
  points[11](0) = (0.917598399222978e0);
  points[12](0) = (0.984183054718588e0);
  array<double, 13> weights = {{0.040484004765316e0,
                                0.092121499837728e0,
                                0.138873510219787e0,
                                0.178145980761946e0,
                                0.207816047536889e0,
                                0.226283180262897e0,
                                0.232551553230874e0,
                                0.226283180262897e0,
                                0.207816047536889e0,
                                0.178145980761946e0,
                                0.138873510219787e0,
                                0.092121499837728e0,
                                0.040484004765316e0}};
  return QuadratureRule<1, 13>(points, weights);
}

template <>
QuadratureRule<1, 14>
buildGaussianQuadrature<1, 14>() {
  array<Matrix<double, 1, 1>, 14> points;
  points[0](0) = (-0.986283808696812e0);
  points[1](0) = (-0.928434883663574e0);
  points[2](0) = (-0.827201315069765e0);
  points[3](0) = (-0.687292904811685e0);
  points[4](0) = (-0.515248636358154e0);
  points[5](0) = (-0.319112368927890e0);
  points[6](0) = (-0.108054948707344e0);
  points[7](0) = (0.108054948707344e0);
  points[8](0) = (0.319112368927890e0);
  points[9](0) = (0.515248636358154e0);
  points[10](0) = (0.687292904811685e0);
  points[11](0) = (0.827201315069765e0);
  points[12](0) = (0.928434883663574e0);
  points[13](0) = (0.986283808696812e0);
  array<double, 14> weights = {{0.035119460331752e0,
                                0.080158087159760e0,
                                0.121518570687903e0,
                                0.157203167158194e0,
                                0.185538397477938e0,
                                0.205198463721296e0,
                                0.215263853463158e0,
                                0.215263853463158e0,
                                0.205198463721296e0,
                                0.185538397477938e0,
                                0.157203167158194e0,
                                0.121518570687903e0,
                                0.080158087159760e0,
                                0.035119460331752e0}};
  return QuadratureRule<1, 14>(points, weights);
}

template <>
QuadratureRule<1, 15>
buildGaussianQuadrature<1, 15>() {
  array<Matrix<double, 1, 1>, 15> points;
  points[0](0) = (-0.987992518020485e0);
  points[1](0) = (-0.937273392400706e0);
  points[2](0) = (-0.848206583410427e0);
  points[3](0) = (-0.724417731360170e0);
  points[4](0) = (-0.570972172608539e0);
  points[5](0) = (-0.394151347077563e0);
  points[6](0) = (-0.201194093997435e0);
  points[7](0) = (0.                 );
  points[8](0) = (0.201194093997435e0);
  points[9](0) = (0.394151347077563e0);
  points[10](0) = (0.570972172608539e0);
  points[11](0) = (0.724417731360170e0);
  points[12](0) = (0.848206583410427e0);
  points[13](0) = (0.937273392400706e0);
  points[14](0) = (0.987992518020485e0);
  array<double, 15> weights = {{0.030753241996117e0,
                                0.070366047488108e0,
                                0.107159220467172e0,
                                0.139570677926154e0,
                                0.166269205816994e0,
                                0.186161000015562e0,
                                0.198431485327111e0,
                                0.202578241925561e0,
                                0.198431485327111e0,
                                0.186161000015562e0,
                                0.166269205816994e0,
                                0.139570677926154e0,
                                0.107159220467172e0,
                                0.070366047488108e0,
                                0.030753241996117e0}};
  return QuadratureRule<1, 15>(points, weights);
}

template <>
QuadratureRule<1, 16>
buildGaussianQuadrature<1, 16>() {
  array<Matrix<double, 1, 1>, 16> points;
  points[0](0) = (-0.989400934991650e0);
  points[1](0) = (-0.944575023073233e0);
  points[2](0) = (-0.865631202387832e0);
  points[3](0) = (-0.755404408355003e0);
  points[4](0) = (-0.617876244402644e0);
  points[5](0) = (-0.458016777657227e0);
  points[6](0) = (-0.281603550779259e0);
  points[7](0) = (-0.095012509837637e0);
  points[8](0) = (0.095012509837637e0);
  points[9](0) = (0.281603550779259e0);
  points[10](0) = (0.458016777657227e0);
  points[11](0) = (0.617876244402644e0);
  points[12](0) = (0.755404408355003e0);
  points[13](0) = (0.865631202387832e0);
  points[14](0) = (0.944575023073233e0);
  points[15](0) = (0.989400934991650e0);
  array<double, 16> weights = {{0.027152459411754e0,
                                0.062253523938648e0,
                                0.095158511682493e0,
                                0.124628971255534e0,
                                0.149595988816577e0,
                                0.169156519395003e0,
                                0.182603415044924e0,
                                0.189450610455069e0,
                                0.189450610455069e0,
                                0.182603415044924e0,
                                0.169156519395003e0,
                                0.149595988816577e0,
                                0.124628971255534e0,
                                0.095158511682493e0,
                                0.062253523938648e0,
                                0.027152459411754e0}};
  return QuadratureRule<1, 16>(points, weights);
}


//------------------------------------------------------------------------------
// Interpolation::Simplicial (Triangular/Tetrahedral)
//------------------------------------------------------------------------------

template <unsigned Dimension, unsigned NumberOfPoints>
QuadratureRule<Dimension, NumberOfPoints>
buildSimplicialQuadrature() {
  errorStatement("unimplemented simplicial quadrature for problem Dimension %u "
        "and number of points %u\n", Dimension, NumberOfPoints);
  exit(1);
}

//------------------------------------------------------------------------------
// Triangle
//------------------------------------------------------------------------------

template <>
QuadratureRule<2, 1>
buildSimplicialQuadrature<2, 1>() {
  array<Matrix<double, 2, 1>, 1> points;
  double oneThird = 1./3.;
  points[0] = Matrix<double, 2, 1>(oneThird,oneThird);
  array<double, 1> weights = {{0.5e0}};
  return QuadratureRule<2, 1>(points, weights);
}

template <>
QuadratureRule<2, 3>
buildSimplicialQuadrature<2, 3>() {
  array<Matrix<double, 2, 1>, 3> points;
  double oneThird = 1.e0/3.e0;
  points[0] = Matrix<double, 2, 1>(0.,0.5e0);
  points[1] = Matrix<double, 2, 1>(0.5e0,0.);
  points[2] = Matrix<double, 2, 1>(0.5e0,0.5e0);
  // points[0] = Matrix<double, 2, 1>(2./3.,1./6.);
  // points[1] = Matrix<double, 2, 1>(1./6.,1./6.);
  // points[2] = Matrix<double, 2, 1>(1./6.,2./3.);
  array<double, 3> weights = {{0.5*oneThird,
                               0.5*oneThird,
                               0.5*oneThird}};
  return QuadratureRule<2, 3>(points, weights);
}

template <>
QuadratureRule<2, 6>
buildSimplicialQuadrature<2, 6>() {
  array<Matrix<double, 2, 1>, 6> points;
  double oneSixth = 1.e0/6.e0;
  double twoThirds = 2.e0/3.e0;
  double oneSixtieth = 1.e0/60.e0;
  points[0] = Matrix<double, 2, 1>(0.,0.5e0);
  points[1] = Matrix<double, 2, 1>(0.5e0,0.);
  points[2] = Matrix<double, 2, 1>(0.5e0,0.5e0);
  points[3] = Matrix<double, 2, 1>(twoThirds,oneSixth);
  points[4] = Matrix<double, 2, 1>(oneSixth,twoThirds);
  points[5] = Matrix<double, 2, 1>(oneSixth,oneSixth);
  array<double, 6> weights = {{oneSixtieth,
                               oneSixtieth,
                               oneSixtieth,
                               0.15e0,
                               0.15e0,
                               0.15e0}};
  return QuadratureRule<2, 6>(points, weights);
}

template <>
QuadratureRule<2, 7>
buildSimplicialQuadrature<2, 7>() {
  array<Matrix<double, 2, 1>, 7> points;
  double  oneThird = 1.e0/3.e0;
  points[0] = Matrix<double, 2, 1>(oneThird,oneThird);
  points[1] = Matrix<double, 2, 1>(1.0e0 - 2.*0.101286507323456338800987361915123e0,
                                   0.101286507323456338800987361915123e0);
  points[2] = Matrix<double, 2, 1>(0.101286507323456338800987361915123e0,
                                   1.0e0 - 2.*0.101286507323456338800987361915123e0);
  points[3] = Matrix<double, 2, 1>(0.101286507323456338800987361915123e0,
                                   0.101286507323456338800987361915123e0);
  points[4] = Matrix<double, 2, 1>(1.0e0 - 2.*0.470142064105115089770441209513447e0,
                                   0.470142064105115089770441209513447e0);
  points[5] = Matrix<double, 2, 1>(0.470142064105115089770441209513447e0,
                                   1.0e0 - 2.*0.470142064105115089770441209513447e0);
  points[6] = Matrix<double, 2, 1>(0.470142064105115089770441209513447e0,
                                   0.470142064105115089770441209513447e0);
  array<double, 7> weights = {{0.1125e0,
                               0.0629695902724135762978419727500906e0,
                               0.0629695902724135762978419727500906e0,
                               0.0629695902724135762978419727500906e0,
                               0.0661970763942530903688246939165759e0,
                               0.0661970763942530903688246939165759e0,
                               0.0661970763942530903688246939165759e0}};
  return QuadratureRule<2, 7>(points, weights);
}

template <>
QuadratureRule<2, 12>
buildSimplicialQuadrature<2, 12>() {
  array<Matrix<double, 2, 1>, 12> points;
  points[0] = Matrix<double, 2, 1>(1.0e0 - 2.*0.0630890144915022283403316028708191e0,
                                   0.0630890144915022283403316028708191e0);
  points[1] = Matrix<double, 2, 1>(0.0630890144915022283403316028708191e0,
                                   2.*0.0630890144915022283403316028708191e0);
  points[2] = Matrix<double, 2, 1>(0.0630890144915022283403316028708191e0,
                                   0.0630890144915022283403316028708191e0);
  points[3] = Matrix<double, 2, 1>(1.0e0 - 2.*0.249286745170910421291638553107019e0,
                                   0.249286745170910421291638553107019e0);
  points[4] = Matrix<double, 2, 1>(0.249286745170910421291638553107019e0,
                                   1.0e0 - 2.*0.249286745170910421291638553107019e0);
  points[5] = Matrix<double, 2, 1>(0.249286745170910421291638553107019e0,
                                   0.249286745170910421291638553107019e0);
  points[6] = Matrix<double, 2, 1>(1.0e0 - 0.0531450498448169473532496716313981e0 -
                                   0.310352451033784405416607733956552e0,
                                   0.0531450498448169473532496716313981e0);
  points[7] = Matrix<double, 2, 1>(0.0531450498448169473532496716313981e0,
                                   1.0e0 - 0.310352451033784405416607733956552e0 -
                                   0.0531450498448169473532496716313981e0);
  points[8] = Matrix<double, 2, 1>(0.0531450498448169473532496716313981e0,
                                   0.310352451033784405416607733956552e0);
  points[9] = Matrix<double, 2, 1>(1.0e0 - 0.310352451033784405416607733956552e0 -
                                   0.0531450498448169473532496716313981e0,
                                   0.310352451033784405416607733956552e0);
  points[10] = Matrix<double, 2, 1>(0.310352451033784405416607733956552e0,
                                    1.0e0 - 0.0531450498448169473532496716313981e0 -
                                    0.310352451033784405416607733956552e0);
  points[11] = Matrix<double, 2, 1>(0.310352451033784405416607733956552e0,
                                    0.0531450498448169473532496716313981e0);
  array<double, 12> weights = {{0.0254224531851034084604684045534344e0,
                                0.0254224531851034084604684045534344e0,
                                0.0254224531851034084604684045534344e0,
                                0.0583931378631896830126448056927897e0,
                                0.0583931378631896830126448056927897e0,
                                0.0583931378631896830126448056927897e0,
                                0.0414255378091867875967767282102212e0,
                                0.0414255378091867875967767282102212e0,
                                0.0414255378091867875967767282102212e0,
                                0.0414255378091867875967767282102212e0,
                                0.0414255378091867875967767282102212e0,
                                0.0414255378091867875967767282102212e0}};
  return QuadratureRule<2, 12>(points, weights);
}

template <>
QuadratureRule<2, 13>
buildSimplicialQuadrature<2, 13>() {
  array<Matrix<double, 2, 1>, 13> points;
  double oneThird = 1.e0/3.e0;
  points[0] = Matrix<double, 2, 1>(oneThird, oneThird);
  points[1] = Matrix<double, 2, 1>(1.0e0 - 2.*0.260345966079039826926242469139236e0,
                                   0.260345966079039826926242469139236e0);
  points[2] = Matrix<double, 2, 1>(0.260345966079039826926242469139236e0,
                                   1.0e0 - 2.*0.260345966079039826926242469139236e0);
  points[3] = Matrix<double, 2, 1>(0.260345966079039826926242469139236e0,
                                   0.260345966079039826926242469139236e0);
  points[4] = Matrix<double, 2, 1>(1.0e0 - 2.*0.0651301029022158115380259063119754e0,
                                   0.0651301029022158115380259063119754e0);
  points[5] = Matrix<double, 2, 1>(0.0651301029022158115380259063119754e0,
                                   1.0e0 - 2.*0.0651301029022158115380259063119754e0);
  points[6] = Matrix<double, 2, 1>(0.0651301029022158115380259063119754e0,
                                   0.0651301029022158115380259063119754e0);
  points[7] = Matrix<double, 2, 1>(1.0e0 - 0.0486903154253164117930215585284131e0 -
                                   0.312865496004873861406644476768401e0,
                                   0.0486903154253164117930215585284131e0);
  points[8] = Matrix<double, 2, 1>(0.0486903154253164117930215585284131e0,
                                   1.0e0 - 0.312865496004873861406644476768401e0 -
                                   0.0486903154253164117930215585284131e0);
  points[9] = Matrix<double, 2, 1>(0.0486903154253164117930215585284131e0,
                                   0.312865496004873861406644476768401e0);
  points[10] = Matrix<double, 2, 1>(1.0e0 - 0.0486903154253164117930215585284131e0 -
                                    0.312865496004873861406644476768401e0,
                                    0.312865496004873861406644476768401e0);
  points[11] = Matrix<double, 2, 1>(0.312865496004873861406644476768401e0,
                                    1.0e0 - 0.0486903154253164117930215585284131e0 -
                                    0.312865496004873861406644476768401e0);
  points[12] = Matrix<double, 2, 1>(0.312865496004873861406644476768401e0,
                                    0.0486903154253164117930215585284131e0);
  array<double, 13> weights = {{-0.0747850222338408753148556277365486e0,
                                0.0878076287166039058767597055781635e0,
                                0.0878076287166039058767597055781635e0,
                                0.0878076287166039058767597055781635e0,
                                0.0266736178044192456349936444495335e0,
                                0.0266736178044192456349936444495335e0,
                                0.0266736178044192456349936444495335e0,
                                0.0385568804451285701299325962755762e0,
                                0.0385568804451285701299325962755762e0,
                                0.0385568804451285701299325962755762e0,
                                0.0385568804451285701299325962755762e0,
                                0.0385568804451285701299325962755762e0,
                                0.0385568804451285701299325962755762e0}};
  return QuadratureRule<2, 13>(points, weights);
}

template <>
QuadratureRule<2, 16>
buildSimplicialQuadrature<2, 16>() {
  array<Matrix<double, 2, 1>, 16> points;
  double oneThird = 1.e0/3.e0;
  points[0] = Matrix<double, 2, 1>(oneThird, oneThird);
  points[1] = Matrix<double, 2, 1>(1.0e0 - 2.*0.476665439382152376067071748878465e0,
                                   0.476665439382152376067071748878465e0);
  points[2] = Matrix<double, 2, 1>(0.476665439382152376067071748878465e0,
                                   1.0e0 - 2.*0.476665439382152376067071748878465e0);
  points[3] = Matrix<double, 2, 1>(0.476665439382152376067071748878465e0,
                                   0.476665439382152376067071748878465e0);
  points[4] = Matrix<double, 2, 1>(1.0e0 - 2.*0.0337718440544803428071248668994412e0,
                                   0.0337718440544803428071248668994412e0);
  points[5] = Matrix<double, 2, 1>(0.0337718440544803428071248668994412e0,
                                   1.0e0 - 2.*0.0337718440544803428071248668994412e0);
  points[6] = Matrix<double, 2, 1>(0.0337718440544803428071248668994412e0,
                                   0.0337718440544803428071248668994412e0);
  points[7] = Matrix<double, 2, 1>(1.0e0 - 2.*0.270347889165403620102711192274472e0,
                                   0.270347889165403620102711192274472e0);
  points[8] = Matrix<double, 2, 1>(0.270347889165403620102711192274472e0,
                                   1.0e0 - 2.*0.270347889165403620102711192274472e0);
  points[9] = Matrix<double, 2, 1>(0.270347889165403620102711192274472e0,
                                   0.270347889165403620102711192274472e0);
  points[10] = Matrix<double, 2, 1>(1.0e0 - 0.745829490767251371671683009263721e0 -
                                    0.0514643354866615258021682284492792e0,
                                    0.745829490767251371671683009263721e0);
  points[11] = Matrix<double, 2, 1>(0.745829490767251371671683009263721e0,
                                    1.0e0 - 0.0514643354866615258021682284492792e0 -
                                    0.745829490767251371671683009263721e0);
  points[12] = Matrix<double, 2, 1>(0.745829490767251371671683009263721e0,
                                    0.0514643354866615258021682284492792e0);
  points[13] = Matrix<double, 2, 1>(1.0e0 - 0.745829490767251371671683009263721e0 -
                                    0.0514643354866615258021682284492792e0,
                                    0.0514643354866615258021682284492792e0);
  points[14] = Matrix<double, 2, 1>(0.0514643354866615258021682284492792e0,
                                    1.0e0 - 0.745829490767251371671683009263721e0 -
                                    0.0514643354866615258021682284492792e0);
  points[15] = Matrix<double, 2, 1>(0.0514643354866615258021682284492792e0,
                                    0.745829490767251371671683009263721e0);
  array<double, 16> weights = {{-0.141709192555694106139608305269904e0,
                                0.0349534809663262894329607391832926e0,
                                0.0349534809663262894329607391832926e0,
                                0.0349534809663262894329607391832926e0,
                                0.854545633580044472243722969322347e-2,
                                0.854545633580044472243722969322347e-2,
                                0.854545633580044472243722969322347e-2,
                                0.109414941165223740315377978302527e0,
                                0.109414941165223740315377978302527e0,
                                0.109414941165223740315377978302527e0,
                                0.0304945928589404471212134106221289e0,
                                0.0304945928589404471212134106221289e0,
                                0.0304945928589404471212134106221289e0,
                                0.0304945928589404471212134106221289e0,
                                0.0304945928589404471212134106221289e0,
                                0.0304945928589404471212134106221289e0}};
  return QuadratureRule<2, 16>(points, weights);
}

template <>
QuadratureRule<2, 19>
buildSimplicialQuadrature<2, 19>() {
  array<Matrix<double, 2, 1>, 19> points;
  double oneThird = 1.e0/3.e0;
  points[0] = Matrix<double, 2, 1>(oneThird, oneThird);
  points[1] = Matrix<double, 2, 1>(1.0e0 - 2.*0.489682519198737627783706924836192e0,
                                   0.489682519198737627783706924836192e0);
  points[2] = Matrix<double, 2, 1>(0.489682519198737627783706924836192e0,
                                   1.0e0 - 2.*0.489682519198737627783706924836192e0);
  points[3] = Matrix<double, 2, 1>(0.489682519198737627783706924836192e0,
                                   0.489682519198737627783706924836192e0);
  points[4] = Matrix<double, 2, 1>(1.0e0 - 2.*0.437089591492936637269930364435354e0,
                                   0.437089591492936637269930364435354e0);
  points[5] = Matrix<double, 2, 1>(0.437089591492936637269930364435354e0,
                                   1.0e0 - 2.*0.437089591492936637269930364435354e0);
  points[6] = Matrix<double, 2, 1>(0.437089591492936637269930364435354e0,
                                   0.437089591492936637269930364435354e0);
  points[7] = Matrix<double, 2, 1>(1.0e0 - 2.*0.188203535619032730240961280467335e0,
                                   0.188203535619032730240961280467335e0);
  points[8] = Matrix<double, 2, 1>(0.188203535619032730240961280467335e0,
                                   1.0e0 - 2.*0.188203535619032730240961280467335e0);
  points[9] = Matrix<double, 2, 1>(0.188203535619032730240961280467335e0,
                                   0.188203535619032730240961280467335e0);
  points[10] = Matrix<double, 2, 1>(1.0e0 - 2.*0.0447295133944527098651065899662763e0,
                                    0.0447295133944527098651065899662763e0);
  points[11] = Matrix<double, 2, 1>(0.0447295133944527098651065899662763e0,
                                    1.0e0 - 2.*0.0447295133944527098651065899662763e0);
  points[12] = Matrix<double, 2, 1>(0.0447295133944527098651065899662763e0,
                                    0.0447295133944527098651065899662763e0);
  points[13] = Matrix<double, 2, 1>(1.0e0 - 0.741198598784498020690079873523423e0 -
                                    0.0368384120547362836348175987833851e0,
                                    0.741198598784498020690079873523423e0);
  points[14] = Matrix<double, 2, 1>(0.741198598784498020690079873523423e0,
                                    1.0e0 - 0.0368384120547362836348175987833851e0 -
                                    0.741198598784498020690079873523423e0);
  points[15] = Matrix<double, 2, 1>(0.741198598784498020690079873523423e0,
                                    0.0368384120547362836348175987833851e0);
  points[16] = Matrix<double, 2, 1>(1.0e0 - 0.741198598784498020690079873523423e0 -
                                    0.0368384120547362836348175987833851e0,
                                    0.0368384120547362836348175987833851e0);
  points[17] = Matrix<double, 2, 1>(0.0368384120547362836348175987833851e0,
                                    1.0e0 - 0.741198598784498020690079873523423e0 -
                                    0.0368384120547362836348175987833851e0);
  points[18] = Matrix<double, 2, 1>(0.0368384120547362836348175987833851e0,
                                    0.741198598784498020690079873523423e0);
  array<double, 19> weights = {{0.0485678981413994169096209912536443e0,
                                0.0156673501135695352684274156436046e0,
                                0.0156673501135695352684274156436046e0,
                                0.0156673501135695352684274156436046e0,
                                0.0389137705023871396583696781497019e0,
                                0.0389137705023871396583696781497019e0,
                                0.0389137705023871396583696781497019e0,
                                0.0398238694636051265164458871320226e0,
                                0.0398238694636051265164458871320226e0,
                                0.0398238694636051265164458871320226e0,
                                0.0127888378293490156308393992794999e0,
                                0.0127888378293490156308393992794999e0,
                                0.0127888378293490156308393992794999e0,
                                0.0216417696886446886446886446886446e0,
                                0.0216417696886446886446886446886446e0,
                                0.0216417696886446886446886446886446e0,
                                0.0216417696886446886446886446886446e0,
                                0.0216417696886446886446886446886446e0,
                                0.0216417696886446886446886446886446e0}};
  return QuadratureRule<2, 19>(points, weights);
}


//------------------------------------------------------------------------------
// Tetrahedron
//------------------------------------------------------------------------------

template <>
QuadratureRule<3, 1>
buildSimplicialQuadrature<3, 1>() {
  array<Matrix<double, 3, 1>, 1> points;
  points[0] = Matrix<double, 3, 1>(0.25e0,0.25e0,0.25e0);
  array<double, 1> weights = {{1.0e0}};
  return QuadratureRule<3, 1>(points, weights);
}

template <>
QuadratureRule<3, 4>
buildSimplicialQuadrature<3, 4>() {
  array<Matrix<double, 3, 1>, 4> points;
  points[0] = Matrix<double, 3, 1>(0.5854101966249685e0,
                                   0.1381966011250150e0,
                                   0.1381966011250150e0);
  points[1] = Matrix<double, 3, 1>(0.1381966011250150e0,
                                   0.5854101966249685e0,
                                   0.1381966011250150e0);
  points[2] = Matrix<double, 3, 1>(0.1381966011250150e0,
                                   0.1381966011250150e0,
                                   0.5854101966249685e0);
  points[4] = Matrix<double, 3, 1>(0.1381966011250150e0,
                                   0.1381966011250150e0,
                                   0.1381966011250150e0);
  array<double, 4> weights = {{0.25e0, 0.25e0, 0.25e0, 0.25e0}};
  return QuadratureRule<3, 4>(points, weights);
}

template <>
QuadratureRule<3, 5>
buildSimplicialQuadrature<3, 5>() {
  double oneSixth = 1.0/6.0;
  array<Matrix<double, 3, 1>, 5> points;
  points[0] = Matrix<double, 3, 1>(0.25e0,0.25e0,0.25e0);
  points[1] = Matrix<double, 3, 1>(0.5e0,oneSixth,oneSixth);
  points[2] = Matrix<double, 3, 1>(oneSixth,0.5e0,oneSixth);
  points[3] = Matrix<double, 3, 1>(oneSixth,oneSixth,0.5e0);
  points[4] = Matrix<double, 3, 1>(oneSixth,oneSixth,oneSixth);
  array<double, 5> weights = {{-0.8e0, 0.45e0, 0.45e0, 0.45e0, 0.45e0}};
  return QuadratureRule<3, 5>(points, weights);
}

}
#endif  // QUADRATURE_H
